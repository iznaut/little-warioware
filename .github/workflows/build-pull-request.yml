# This workflow builds the game every time a PR is opened.
# It will fail the build if it fails to compile
# And also triggers a separate workflow to deploy a preview copy of the build
# (which needs to be a separate run for security reasons.
# see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for context)

name: Build Pull Request Preview

on:
  workflow_dispatch:
      inputs:
        name:
          description: "PR Number"
  pull_request:
    paths-ignore: # do not build for game-irrelvant changes
      - ".**"
      - "LICENSE"
      - "ACKNOWLEDGEMENTS"
      - "**.md"

jobs:
  build_game:
    if: ${{ (github.event.action == 'synchronize' && github.event.label.name != 'skip preview') || github.event.action != 'synchronize' }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout latest code
        uses: actions/checkout@v3
      - name: update credits
        uses: actions/github-script@v3
        with:
          script: |
            const path = require('path');
            const script = require(path.resolve('.github/workflows/update-credits.js'));
            await script(github, context)
      - id: files
        uses: jitterbit/get-changed-files@v1
      - run: |
          for changed_file in ${{ steps.files.outputs.all }}; do
            echo "{test}={changed_file}" >> $GITHUB_OUTPUT
          done
      - uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ test }}
          regex: '/microgames\/(.+?(?=[\/]|$))/gm'
      - name: Echo regex
        run: echo ${{ steps.regex-match.outputs.group1 }}
      # - name: Echo changed files
      #   run: echo ${{ steps.get_changed.outputs.changed[0] }}
      # - name: Setup Godot
      #   uses: lihop/setup-godot@v2
      # - name: Override config to launch specific microgame
      #   shell: bash
      #   run: godot -s .github/workflows/get_mg_scene_from_dir.gd --no-window "${{steps.changed-files-yaml.outputs.all_modified_files}}" --audio-driver "Dummy" --verbose
